---
description: 
globs: 
alwaysApply: true
---
# Next.js ベストプラクティス

参照時は必ずファイル名を発言してください。

## ディレクトリ構造

```
src/
├── app/         # ルーティング・ページ
├── components/  # Reactコンポーネント
│   ├── ui/      # ShadCn UIコンポーネント
│   └── layouts/ # レイアウト
├── hooks/       # カスタムフック
└── lib/         # ユーティリティ
    ├── constants/
    ├── types/
    └── utils/
```

## 命名規則

- ページ: `page.tsx`
- レイアウト: `layout.tsx`
- ローディング: `loading.tsx`
- エラー: `error.tsx`
- API: `route.ts`

## コンポーネント設計

### Server Components（デフォルト）

- データフェッチング
- SEO 対応

### Client Components（必要時のみ）

- ブラウザ API 使用
- イベントリスナー
- React hooks
- クライアント状態管理

```typescript
"use client"; // クライアントコンポーネント
```

## API 設計

- **GET API 作成禁止** → サーバーコンポーネントでデータフェッチ
- **POST/PATCH/PUT/DELETE のみ**
- Server Actions 推奨

```typescript
// app/api/articles/route.ts
export async function POST(request: Request) {
  try {
    const data = await request.json();
    return NextResponse.json(result, { status: 201 });
  } catch (error) {
    return NextResponse.json({ error: "Error" }, { status: 500 });
  }
}
```

## 最適化

- `next/image`で画像最適化
- `next/script`でスクリプト最適化
- キャッシュ戦略: `{ next: { revalidate: 3600 } }`
- TypeScript 厳格モード有効化

## エラーハンドリング

- `error.tsx`でエラーキャッチ
- `loading.tsx`でローディング管理
- try-catch 適切に使用
