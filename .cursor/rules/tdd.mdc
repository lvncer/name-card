---
description: 
globs: 
alwaysApply: false
---
# テスト駆動開発 (TDD) ルール

参照時は必ずファイル名を発言してください。

## 基本原則

- **Red-Green-Refactor** サイクルを遵守
- テストを先に書いてから実装
- 小さな単位で進める
- すべての機能にテストを作成

## 開発サイクル

### 1. Red （失敗するテストを書く）

- 実装する機能の要件を明確に理解
- 最小限の失敗するテストを作成
- テストは具体的で分かりやすく

```typescript
// 失敗するテストの例
test("ユーザー登録時にメールアドレスが必須", async () => {
  const user = { name: "テスト太郎" };
  await expect(registerUser(user)).rejects.toThrow("メールアドレスは必須です");
});
```

### 2. Green （テストが通るコードを書く）

- テストをパスする最小限の実装を行う
- 完璧でなくても良い
- 複雑な問題は単純なステップに分解

```typescript
// テストを通す最小限の実装
function registerUser(user: User) {
  if (!user.email) {
    throw new Error("メールアドレスは必須です");
  }
  // 残りの実装...
}
```

### 3. Refactor （リファクタリング）

- コードの品質を改善 (DRY, SOLID 原則)
- テストが引き続き通ることを確認
- 技術的負債を残さない

## テスト構造

### 単体テスト

- 関数/メソッド単位でテスト
- 外部依存をモック
- `/src/components/__tests__/` または `/src/__tests__/`に配置

### 統合テスト

- 複数のコンポーネント/モジュール間の連携テスト
- `/src/tests/integration/`に配置
- API 呼び出しをモック

### E2E テスト

- ユーザー操作をシミュレート
- `/e2e/`に配置
- クリティカルなユーザーパスに集中

## テストツール

- **Jest**: 単体/統合テスト
- **React Testing Library**: コンポーネントテスト
- **Cypress/Playwright**: E2E テスト
- **MSW**: API モック

## 命名規則

- テストファイル: `*.test.ts` または `*.spec.ts`
- テスト関数: `test('〜が〜する時、〜すべき')`
- モック: `mock〜` または `fake〜`

## カバレッジ

- 目標: 80%以上のカバレッジ
- `/coverage/`ディレクトリに出力
- コアロジックは 100%を目指す

## CI/CD 統合

- プルリクエスト時に自動テスト実行
- カバレッジレポート自動生成
- テスト失敗時はマージブロック

## モックと依存性

- 外部 API/DB はモックに置き換え
- テストデータは専用のファクトリ関数で生成
- 環境変数は`.env.test`で管理

## パフォーマンス

- テストは速く実行できるようにする
- 重いテストは分離または並列実行
- テストデータのセットアップ/クリーンアップを効率化

## 注意事項

- テストのためにコードを変更しない
- 実装詳細ではなく、動作をテスト
- スナップショットテストは慎重に使用

